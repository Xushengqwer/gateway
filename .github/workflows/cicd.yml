name: Deploy Gateway Service

on:
  push:
    branches:
      - main
    paths:
      - 'gateway/**' # 仅当网关相关代码变更时触发
      - '.github/workflows/deploy.yml' # 工作流自身变更也应触发

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      image_tag: ${{ steps.meta.outputs.version }} # 输出一个明确的 tag
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/gateway-service # 使用 owner 防止 fork 仓库名问题
          tags: |
            type=sha,format=short
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./gateway/Dockerfile # 明确指定 Dockerfile 路径
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-to-cvm:
    name: Deploy to Tencent Cloud CVM
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Deploy to CVM
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.CVM_HOST }}
          username: ${{ secrets.CVM_USERNAME }}
          key: ${{ secrets.CVM_SSH_PRIVATE_KEY }}
          script: |
            set -e # 确保脚本在任何命令失败时立即退出

            # --- 变量定义 ---
            # 从上一个 job 获取镜像 tag
            export IMAGE_TAG="${{ needs.build-and-push.outputs.image_tag }}"
            # 构造完整的镜像名称 (并转换为小写，因为 GHCR 要求)
            export GHCR_IMAGE_NAME_LOWER=$(echo "ghcr.io/${{ github.repository_owner }}/gateway-service" | tr '[:upper:]' '[:lower:]')
            export FULL_IMAGE_NAME="${GHCR_IMAGE_NAME_LOWER}:${IMAGE_TAG}"
            export CONTAINER_NAME="gateway-app"
            export DOCKER_NETWORK="doer_infra_doer_xyz_dev_network"

            echo "准备部署镜像: ${FULL_IMAGE_NAME}"

            # --- 部署步骤 ---
            echo "1. 登录到 GitHub Container Registry..."
            echo "${{ secrets.GHCR_PAT_FOR_CVM }}" | docker login ghcr.io -u ${{ secrets.CVM_GH_USERNAME }} --password-stdin

            echo "2. 拉取最新镜像..."
            docker pull ${FULL_IMAGE_NAME}

            echo "3. 停止并移除旧容器..."
            docker stop ${CONTAINER_NAME} || true
            docker rm ${CONTAINER_NAME} || true

            echo "4. 启动新容器，并注入生产环境密钥..."
            docker run -d \
              -p 8080:8080 \
              --name ${CONTAINER_NAME} \
              --network ${DOCKER_NETWORK} \
              --restart unless-stopped \
              \
              # [关键] 从 GitHub Secrets 注入环境变量
              # 容器内的环境变量名 (如 JWTCONFIG_SECRET_KEY) 必须与 Viper 期望的完全一致
              # 变量的值来自 GitHub Secrets (如 secrets.PROD_JWT_SECRET_KEY)
              -e JWTCONFIG_SECRET_KEY='${{ secrets.PROD_JWT_SECRET_KEY }}' \
              -e JWTCONFIG_REFRESH_SECRET='${{ secrets.PROD_JWT_REFRESH_SECRET }}' \
              -e CORS_ALLOWORIGINS='${{ secrets.PROD_CORS_ALLOW_ORIGINS }}' \
              \
              # 使用拉取到的镜像启动容器
              ${FULL_IMAGE_NAME}

            echo "✅ 部署成功! Gateway 应用正在运行。"

            # --- 部署后验证 ---
            echo "等待 10 秒让服务启动..."
            sleep 10
            echo "显示容器最新日志以供检查:"
            docker logs --tail 100 ${CONTAINER_NAME}