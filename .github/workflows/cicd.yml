name: CI/CD for Gateway Service

on:
  push:
    branches:
      - main

env:
  APP_CONTAINER_PORT: 8080

jobs:
  build-and-push-to-ghcr:
    name: Build and Push Gateway to GHCR
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      # 我们现在直接输出完整的镜像名和摘要，更可靠
      image_digest: ${{ steps.build_push.outputs.digest }}
      image_name_lowercase: ${{ steps.image_name.outputs.lowercase }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Prepare image name
        id: image_name
        run: |
          IMAGE_NAME_LOWERCASE=$(echo "ghcr.io/${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          echo "lowercase=${IMAGE_NAME_LOWERCASE}" >> $GITHUB_OUTPUT

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        id: build_push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          # 我们直接在这里使用转换后的小写名称和固定的 'latest' 标签进行推送
          tags: ${{ steps.image_name.outputs.lowercase }}:latest
          labels: "built-by=github-actions"
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-to-cvm:
    name: Deploy Gateway to Tencent Cloud CVM
    runs-on: ubuntu-latest
    needs: build-and-push-to-ghcr

    steps:
      - name: Deploy Gateway to CVM
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.CVM_HOST }}
          username: ${{ secrets.CVM_USERNAME }}
          key: ${{ secrets.CVM_SSH_PRIVATE_KEY }}
          command_timeout: 20m

          script: |
            set -e

            # 从上一个 job 获取镜像的 digest (摘要) 和小写的基础名
            export IMAGE_DIGEST="${{ needs.build-and-push-to-ghcr.outputs.image_digest }}"
            export IMAGE_NAME_LOWERCASE="${{ needs.build-and-push-to-ghcr.outputs.image_name_lowercase }}"

            # 使用 @digest 的方式拉取镜像是最精确、最可靠的方式
            export IMAGE_TO_PULL_FULL_NAME="${IMAGE_NAME_LOWERCASE}@${IMAGE_DIGEST}"
            export CONTAINER_NAME="gateway-app"
            export HOST_PORT="8080"
            export DOCKER_NETWORK_NAME="doer_infra_doer_xyz_dev_network"
            
            # --- DEBUGGING: 打印将要使用的变量 ---
            echo "--- DEBUG INFO ---"
            echo "Image Base Name: ${IMAGE_NAME_LOWERCASE}"
            echo "Image Digest: ${IMAGE_DIGEST}"
            echo "Full Image to Pull: ${IMAGE_TO_PULL_FULL_NAME}"
            echo "--------------------"

            echo "登录 GHCR..."
            docker login ghcr.io -u ${{ secrets.CVM_GH_USERNAME }} -p ${{ secrets.GHCR_PAT_FOR_CVM }}

            echo "拉取镜像: ${IMAGE_TO_PULL_FULL_NAME}"
            docker pull ${IMAGE_TO_PULL_FULL_NAME}

            echo "停止并删除旧容器 (如果存在)..."
            docker stop ${CONTAINER_NAME} || true
            docker rm ${CONTAINER_NAME} || true

            echo "启动新容器并注入 gateway 的生产环境变量..."
            # 同样使用 @digest 的精确版本来启动容器
            docker run -d \
              -p ${HOST_PORT}:${{ env.APP_CONTAINER_PORT }} \
              --name ${CONTAINER_NAME} \
              --network ${DOCKER_NETWORK_NAME} \
              -e SERVER_LISTEN_ADDR=":${{ env.APP_CONTAINER_PORT }}" \
              -e SERVER_REQUESTTIMEOUT="60" \
              -e JWTCONFIG_SECRET_KEY="${{ secrets.PROD_JWT_SECRET_KEY }}" \
              -e JWTCONFIG_REFRESH_SECRET="${{ secrets.PROD_JWT_REFRESH_SECRET }}" \
              -e PROD_CORS_ALLOW_ORIGINS="${{ secrets.PROD_CORS_ALLOW_ORIGINS }}" \
              ${IMAGE_TO_PULL_FULL_NAME}

            echo "部署成功! Gateway 应用正在 CVM 的 ${HOST_PORT} 端口上运行。"
            sleep 10
            echo "查看 Gateway 容器最新日志:"
            docker logs --tail 50 ${CONTAINER_NAME}