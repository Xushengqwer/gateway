# 文件路径: .github/workflows/cicd.yml
# 最终修正版

name: Deploy Gateway Service

on:
  push:
    branches:
      - main
    paths:
      - 'gateway/**'
      - 'go-common/**'
      - 'Dockerfile'
      - '.github/workflows/**'

jobs:
  build-and-push:
    name: Build and Push Gateway to GHCR
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      image_tag: ${{ steps.meta.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/gateway-service
          tags: |
            type=sha,format=short
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image to GHCR
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-to-cvm:
    name: Deploy Gateway to Tencent Cloud CVM
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Deploy Gateway to CVM
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.CVM_HOST }}
          username: ${{ secrets.CVM_USERNAME }}
          key: ${{ secrets.CVM_SSH_PRIVATE_KEY }}
          command_timeout: 20m
          script: |
            set -e

            # --- 变量定义 ---
            export IMAGE_TAG_TO_PULL="${{ needs.build-and-push.outputs.image_tag }}"
            export GHCR_IMAGE_BASE_LOWERCASE=$(echo "ghcr.io/${{ github.repository_owner }}/gateway-service" | tr '[:upper:]' '[:lower:]')
            export IMAGE_TO_PULL_FULL_NAME="${GHCR_IMAGE_BASE_LOWERCASE}:${IMAGE_TAG_TO_PULL}"
            export CONTAINER_NAME="gateway-app"
            export HOST_PORT="8080"
            export DOCKER_NETWORK_NAME="doer_project_doer_xyz_dev_network"


            # --- 脚本执行 ---
            echo "登录 GHCR..."
            echo "${{ secrets.GHCR_PAT_FOR_CVM }}" | docker login ghcr.io -u ${{ secrets.CVM_GH_USERNAME }} --password-stdin

            echo "拉取镜像: ${IMAGE_TO_PULL_FULL_NAME}"
            docker pull ${IMAGE_TO_PULL_FULL_NAME}

            echo "停止并删除旧容器 (如果存在)..."
            # [优化] 将错误输出重定向，使日志更整洁
            docker stop ${CONTAINER_NAME} >/dev/null 2>&1 || true
            docker rm ${CONTAINER_NAME} >/dev/null 2>&1 || true

            # [核心修正] 启动新容器，使用更健壮的多行格式
            echo "启动新容器..."
            docker run -d \
              -p ${HOST_PORT}:8080 \
              --name ${CONTAINER_NAME} \
              --network ${DOCKER_NETWORK_NAME} \
              --restart unless-stopped \
              -e JWTCONFIG_SECRET_KEY='${{ secrets.PROD_JWT_SECRET_KEY }}' \
              -e JWTCONFIG_REFRESH_SECRET='${{ secrets.PROD_JWT_REFRESH_SECRET }}' \
              -e CORS_ALLOWORIGINS='${{ secrets.PROD_CORS_ALLOW_ORIGINS }}' \
              ${IMAGE_TO_PULL_FULL_NAME}

            echo "部署成功! Gateway 应用正在 CVM 的 ${HOST_PORT} 端口上运行。"
            sleep 10
            echo "查看 Gateway 容器最新日志 (用于验证配置是否正确加载):"
            docker logs --tail 100 ${CONTAINER_NAME}