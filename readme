# 网关服务 (Gateway Service)

![Gateway Service](https://raw.githubusercontent.com/xushengawyer/gateway-service/master/docs/images/logo.png)

![GitHub Stars](https://img.shields.io/github/stars/xushengawyer/gateway-service?style=social)
![GitHub go.mod Go 版本](https://img.shields.io/github/go-mod/go-version/xushengawyer/gateway-service)
![GitHub 许可证](https://img.shields.io/github/license/xushengawyer/gateway-service)
![GitHub 最后提交](https://img.shields.io/github/last-commit/xushengawyer/gateway-service)

**网关服务** 是一个高性能的 **API 网关**，基于 **Go 语言** 开发，专为微服务架构设计。它提供统一的入口，支持 **请求路由**、**认证授权**、**速率限制**、**日志记录**、**跨域请求**、**全局请求 ID** 和 **简易请求链路追踪** 等功能。适用于多种场景（如 **Web**、**App**、**微信**），支持单机部署和 **Kubernetes (K8S)** 环境。

---

## 目录

- [项目概述](#项目概述)
- [架构与原理](#架构与原理)
  - [架构](#架构)
  - [工作原理](#工作原理)
- [功能特性](#功能特性)
- [使用方法](#使用方法)
  - [先决条件](#先决条件)
  - [安装步骤](#安装步骤)
  - [配置说明](#配置说明)
  - [运行服务](#运行服务)
- [使用注意事项](#使用注意事项)
- [适用环境](#适用环境)
- [更新日志](#更新日志)
- [如何贡献](#如何贡献)
- [许可证](#许可证)

---

## 项目概述

**网关服务** 是一个轻量级、高性能的 API 网关，旨在为微服务架构提供统一的入口点。它通过反向代理将客户端请求路由到下游服务，同时提供以下功能：

- **跨域支持**：支持 Web 客户端跨域请求。
- **认证与授权**：基于 JWT 和 RBAC 实现安全访问控制。
- **速率限制**：保护服务免受流量洪峰影响。
- **日志记录**：结构化日志，便于调试和监控。
- **请求链路追踪**：记录请求流转详情，分析服务间耗时。

网关服务基于 **Go 语言** 和 **Gin 框架** 开发，结合 **Zap 日志**、**JWT 认证** 等技术，支持单机部署和 K8S 集群环境。

---

## 架构与原理

### 架构

网关服务作为客户端与下游微服务之间的反向代理，核心组件包括：

- **请求路由**：根据 URL 前缀将请求路由到下游服务。
- **认证中间件**：验证 JWT 令牌，支持多端场景。
- **授权中间件**：基于角色（RBAC）控制访问权限。
- **跨域支持**：允许 Web 客户端跨域请求。
- **请求链路追踪**：记录请求流转详情，分析服务间耗时。
- **速率限制**：使用令牌桶算法限制请求速率。
- **日志记录**：通过 Zap 实现结构化日志，输出到 `stdout` 和 `stderr`。
- **配置管理**：支持 YAML 文件、环境变量和 K8S ConfigMap 加载配置，支持热更新。

### 工作原理

- **单一入口**：所有客户端请求通过网关，简化客户端逻辑并集中控制。
- **模块化设计**：中间件模块化，可灵活配置和扩展。
- **K8S 兼容**：无缝集成 K8S，支持 ConfigMap、Secret 和动态配置。
- **高性能**：基于 Go 和 Gin 框架，延迟低、吞吐量高。

---

## 功能特性

- **请求路由**：根据 URL 前缀（如 `/api/user`）路由到下游服务（如 `user-service`）。
- **JWT 认证**：支持多平台（Web、App、微信）令牌验证。
- **基于角色的授权**：通过 RBAC 限制服务访问。
- **速率限制**：使用令牌桶算法限制请求速率。
- **结构化日志**：以 JSON 格式记录请求和错误，兼容 K8S 日志系统。
- **动态配置**：支持 YAML 文件、环境变量和 K8S ConfigMap 加载配置，支持热加载。
- **健康检查**：提供 `/health` 端点用于服务状态监控。

---

## 使用方法

### 先决条件

确保你的环境满足以下要求：

- **Go**：1.20 或更高版本。
- **Docker**：用于容器化部署（可选）。
- **Kubernetes**：用于 K8S 部署（可选）。
- **kubectl**：用于管理 K8S 资源（可选）。
- **Git**：用于克隆仓库。

### 安装步骤

1. **克隆仓库**：
   ```bash
   git clone https://github.com/xushengawyer/gateway-service.git
   cd gateway-service
